Task 1: Design an Object-Oriented Application
Choose a Business Topic:

Example: Caf√©
Write Basic Use Cases:

Add objects to collections
Retrieve a specific object from a collection (using list lookup)
Display all objects in each collection
Identify Classes:

Main/driver class
Parent class (at least 1)
Child classes (at least 2)
Group class (at least 1)
Create Class Diagram:

Use a simplified class diagram to represent attributes/methods and inheritance.



Task 2: Code Proper Statements for Your Design
Follow Coding Guidelines:

Use camelCase for objects, LetterCase for classes.
All classes should have toString().
Use public mutators sparingly.
Utilize Inheritance:

Implement interface or implementation inheritance (or both).
Use Overloading and Overriding:

Identify and implement overloaded methods, explaining why overloading is used in each case.
Identify and implement overriding methods, explaining why overriding is used in each case.
Incorporate Polymorphism:

Explain how polymorphism affects the code.
Implement Menus with Recursion:

If applicable to your scenario, create menus with recursion for user interaction.
Use For Each Loops:

Employ for each loops where applicable in your code.



Task 3: Explain the Code with Proper Design Rules
Explain Inheritance:

Detail why inheritance was used in specific classes.
Identify Overloaded Methods:

Provide reasons for using overloading in each case.
Explain Overriding Methods:

Describe why overriding was used in each case.
Discuss Polymorphism:

Elaborate on how polymorphism affects the code.
Screen Shot of Code Testing:

Include at least one screenshot of your code being tested on the object bench.



Task 4: Test at Least One Method
Test a Method:
Choose a method to test and demonstrate how you tested it.
Ensure the test results align with your expectations.


**Submission Guidelines
Prepare Documentation:

Create a report including design, code, explanation, and test details.
Address Complex Problem-Solving Questions:

a. Does the solution need in-depth engineering knowledge?
b. Does the solution involve wide-ranging or conflicting technical, engineering, and other issues?
c. Is the solution well-known, or does it require abstract thinking and analysis to formulate?
d. Does the solution involve infrequently encountered issues?
e. Does the solution need adherence to standards and codes of practice?
f. Does the solution involve stakeholders with conflicting technical requirements?
g. Does the solution involve interdependence between sub-problems or parts?


**Evaluation Criteria
Class Relationships (Problem Analysis):

All major classes, relationships, and inheritance identified.
Member Identification (Problem Analysis):

Attributes and methods identified correctly for most classes.
Functional Specifications (Problem Solution):

The program works and produces correct results, with clear justification for design choices.
Design Rules (Problem Solution):

Code is easy to read, follows proper organization, with minor design rule breaks.


**Rubrics for Assignment Marking
Good (4-5):

Appropriate model design with proper representation.
Correct validation of models with proper justifications.
Moderate (2-3):

Some correct elements in design and code but with areas for improvement.
Poor (1):

Significant issues with design, code, and explanations.
